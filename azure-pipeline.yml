trigger:
- none

variables:
  - group: azuredevops
  - name: serviceconnection
    value: 'Example-AKS'
  
pool:
  vmImage: ubuntu-latest

# parameters:
# - name: serviceconnection
#   displayName: Service Connection name
#   type: string
#   default: 'Example-AKS'


stages:
# - stage: deploy_aks
#   displayName: Deploy AKS cluster
#   jobs:
#   - job: terraform_aks_job
#     displayName: terraform AKS
#     steps:
#     - task: TerraformInstaller@1
#       displayName: terraform install
#       inputs:
#         terraformVersion: 'latest'
#     - task: TerraformTaskV4@4
#       displayName: terraform init
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/src/iac_aks'
#         backendServiceArm: 'MVP'
#         backendAzureRmResourceGroupName: 'test'
#         backendAzureRmStorageAccountName: 'test'
#         backendAzureRmContainerName: 'test'
#         backendAzureRmKey: 'test'
#     - task: TerraformTaskV4@4
#       displayName: terraform apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/src/iac_aks'
#         environmentServiceNameAzureRM: 'MVP'

# - stage: deploy_azuredevops
#   displayName: Deploy service connection for Azure DevOps
#   jobs:
#   - job: deploy_serviceconnection
#     displayName: terraform service connection creation
#     steps:
#     - task: TerraformInstaller@1
#       displayName: terraform install
#       inputs:
#         terraformVersion: 'latest'
#     - task: TerraformTaskV4@4
#       displayName: terraform init
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/src/iac_devops'
#         backendServiceArm: 'MVP'
#         backendAzureRmResourceGroupName: 'test'
#         backendAzureRmStorageAccountName: 'test'
#         backendAzureRmContainerName: 'test'
#         backendAzureRmKey: 'test'
#     - task: TerraformTaskV4@4
#       displayName: terraform apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/src/iac_devops'
#         environmentServiceNameAzureRM: 'MVP'
     
# - stage: deploy_application
#   displayName: Deploy application on AKS Cluster
#   jobs:
#   - job: deploy_application
#     displayName: deploy nginx on aks
#     steps:
#     - task: Kubernetes@1
#       displayName: create a nginx deployment with kubectl commands
#       inputs:
#         connectionType: 'Kubernetes Service Connection'
#         kubernetesServiceEndpoint: $(SERVICECONNECTION_NAME)
#         namespace: 'default'
#         command: 'apply'
#         useConfigurationFile: true
#         configuration: '$(Build.SourcesDirectory)/code/nginx.yml'
#         secretType: 'dockerRegistry'
#         containerRegistryType: 'Azure Container Registry'
- stage: trigger
  displayName: Trigger application deployment pipeline
  jobs:
  - job: deploy_application
    displayName: trigger application pipeline
    steps:
    # - task: Kubernetes@1
    #   displayName: create a nginx deployment with kubectl commands
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceEndpoint: $(SERVICECONNECTION_NAME)
    #     namespace: 'default'
    #     command: 'apply'
    #     useConfigurationFile: true
    #     configuration: '$(Build.SourcesDirectory)/code/nginx.yml'
    #     secretType: 'dockerRegistry'
    #     containerRegistryType: 'Azure Container Registry'
    - task: PowerShell@2
      displayName: trigger azure devops rest api
      inputs:
        targetType: 'inline'
        script: |
          $connectionToken="$(PAT)"
          $base64AuthInfo= [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($connectionToken)"))
          $URL = "https://dev.azure.com/gealexiou/GlobalAzureGreece%202024/_apis/pipelines/19/runs?api-version=7.2-preview.1"
          
          
          $Result = Invoke-RestMethod -Uri $URL -Headers @{authorization = "Basic $base64AuthInfo"} -Method Post -ContentType "application/json"
        pwsh: true